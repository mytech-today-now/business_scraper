name: Documentation Quality Check

on:
  push:
    paths:
      - "docs/**"
      - "*.md"
      - "README.md"
      - "CHANGELOG.md"
      - "VERSION"
      - "package.json"
  pull_request:
    paths:
      - "docs/**"
      - "*.md"
      - "README.md"
      - "CHANGELOG.md"
      - "VERSION"
      - "package.json"
  workflow_dispatch:

jobs:
  documentation-quality:
    name: Documentation Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm install -g markdownlint-cli
          npm install -g markdown-link-check
          npm install -g cspell
          npm install -g alex

      - name: Make validation script executable
        run: chmod +x scripts/validate-docs.js

      - name: Run custom documentation validation
        id: custom-validation
        run: |
          echo "Running custom documentation validation..."
          node scripts/validate-docs.js
          echo "validation-status=$?" >> $GITHUB_OUTPUT

      - name: Lint Markdown files
        run: |
          echo "Linting Markdown files..."
          markdownlint docs/**/*.md *.md || true

      - name: Check Markdown links
        run: |
          echo "Checking Markdown links..."
          find . -name "*.md" -not -path "./node_modules/*" -exec markdown-link-check {} \; || true

      - name: Spell check documentation
        run: |
          echo "Spell checking documentation..."
          cspell "docs/**/*.md" "*.md" || true

      - name: Check inclusive language
        run: |
          echo "Checking for inclusive language..."
          alex docs/**/*.md *.md || true

      - name: Validate version consistency
        run: |
          echo "Validating version consistency..."
          VERSION=$(cat VERSION)
          echo "Current version: $VERSION"

          # Check package.json version
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$VERSION" != "$PACKAGE_VERSION" ]; then
            echo "‚ùå Version mismatch: VERSION file ($VERSION) vs package.json ($PACKAGE_VERSION)"
            exit 1
          fi

          # Check README.md version badge
          if ! grep -q "version-$VERSION" README.md; then
            echo "‚ùå Version badge not found in README.md for version $VERSION"
            exit 1
          fi

          echo "‚úÖ Version consistency check passed"

      - name: Check documentation completeness
        run: |
          echo "Checking documentation completeness..."

          # Required documentation files
          REQUIRED_FILES=(
            "README.md"
            "CHANGELOG.md"
            "VERSION"
            "docs/README.md"
            "docs/API_DOCUMENTATION.md"
            "docs/CRM_EXPORT_GUIDE.md"
            "docs/DOCUMENTATION_STANDARDS.md"
            "docs/CONTRIBUTING_DOCUMENTATION.md"
          )

          MISSING_FILES=()
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              MISSING_FILES+=("$file")
            fi
          done

          if [ ${#MISSING_FILES[@]} -gt 0 ]; then
            echo "‚ùå Missing required documentation files:"
            printf '%s\n' "${MISSING_FILES[@]}"
            exit 1
          fi

          echo "‚úÖ All required documentation files present"

      - name: Validate API documentation
        run: |
          echo "Validating API documentation..."

          # Check if API documentation includes current version
          VERSION=$(cat VERSION)
          if ! grep -q "$VERSION" docs/API_DOCUMENTATION.md; then
            echo "‚ùå API documentation does not reference current version $VERSION"
            exit 1
          fi

          # Check for required API sections
          REQUIRED_SECTIONS=(
            "Overview"
            "Authentication"
            "Response Format"
            "Business Search API"
            "CRM Export API"
            "Error Codes"
          )

          for section in "${REQUIRED_SECTIONS[@]}"; do
            if ! grep -q "## .*$section" docs/API_DOCUMENTATION.md; then
              echo "‚ùå Missing required section in API documentation: $section"
              exit 1
            fi
          done

          echo "‚úÖ API documentation validation passed"

      - name: Check for outdated information
        run: |
          echo "Checking for potentially outdated information..."

          # Check for old version references
          OLD_VERSIONS=("1.0.0" "2.0.0" "3.0.0" "3.1.0" "3.2.0" "3.3.0" "3.4.0" "3.5.0")
          CURRENT_VERSION=$(cat VERSION)

          for version in "${OLD_VERSIONS[@]}"; do
            if [ "$version" != "$CURRENT_VERSION" ]; then
              FILES_WITH_OLD_VERSION=$(grep -r "version-$version" docs/ *.md 2>/dev/null || true)
              if [ ! -z "$FILES_WITH_OLD_VERSION" ]; then
                echo "‚ö†Ô∏è  Found references to old version $version:"
                echo "$FILES_WITH_OLD_VERSION"
              fi
            fi
          done

          echo "‚úÖ Outdated information check completed"

      - name: Generate documentation metrics
        run: |
          echo "Generating documentation metrics..."

          # Count documentation files
          MD_FILES=$(find . -name "*.md" -not -path "./node_modules/*" | wc -l)
          DOCS_FILES=$(find docs/ -name "*.md" | wc -l)

          # Calculate total lines of documentation
          TOTAL_LINES=$(find . -name "*.md" -not -path "./node_modules/*" -exec wc -l {} + | tail -1 | awk '{print $1}')

          # Count images and assets
          IMAGES=$(find docs/ -name "*.png" -o -name "*.jpg" -o -name "*.gif" -o -name "*.svg" 2>/dev/null | wc -l)

          echo "üìä Documentation Metrics:"
          echo "   Total Markdown files: $MD_FILES"
          echo "   Documentation files: $DOCS_FILES"
          echo "   Total lines: $TOTAL_LINES"
          echo "   Images/Assets: $IMAGES"

          # Save metrics to file
          cat > docs/DOCUMENTATION_METRICS.md << EOF
          # Documentation Metrics

          Generated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          Version: $(cat VERSION)

          ## Statistics

          - **Total Markdown files**: $MD_FILES
          - **Documentation files**: $DOCS_FILES
          - **Total lines of documentation**: $TOTAL_LINES
          - **Images and assets**: $IMAGES

          ## Quality Indicators

          - **Version consistency**: ‚úÖ Validated
          - **Required files**: ‚úÖ All present
          - **Link validation**: ‚úÖ Checked
          - **Spell checking**: ‚úÖ Performed
          - **Inclusive language**: ‚úÖ Checked

          ---
          *Generated automatically by GitHub Actions*
          EOF

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-validation-report
          path: |
            docs/VALIDATION_REPORT.md
            docs/DOCUMENTATION_METRICS.md
          retention-days: 30

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## üìö Documentation Quality Check Results\n\n';

            // Add validation results if available
            try {
              const validationReport = fs.readFileSync('docs/VALIDATION_REPORT.md', 'utf8');
              const lines = validationReport.split('\n');
              const summaryIndex = lines.findIndex(line => line.includes('## Summary'));
              if (summaryIndex !== -1) {
                const summary = lines.slice(summaryIndex, summaryIndex + 10).join('\n');
                comment += summary + '\n\n';
              }
            } catch (error) {
              comment += '‚ö†Ô∏è Could not read validation report\n\n';
            }

            // Add metrics if available
            try {
              const metrics = fs.readFileSync('docs/DOCUMENTATION_METRICS.md', 'utf8');
              const lines = metrics.split('\n');
              const statsIndex = lines.findIndex(line => line.includes('## Statistics'));
              if (statsIndex !== -1) {
                const stats = lines.slice(statsIndex, statsIndex + 15).join('\n');
                comment += stats + '\n\n';
              }
            } catch (error) {
              comment += '‚ö†Ô∏è Could not read documentation metrics\n\n';
            }

            comment += '---\n*This comment was generated automatically by the documentation quality workflow.*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail if validation errors found
        if: steps.custom-validation.outputs.validation-status != '0'
        run: |
          echo "‚ùå Documentation validation failed with errors"
          exit 1

      - name: Success message
        if: success()
        run: |
          echo "‚úÖ All documentation quality checks passed!"
          echo "üìö Documentation is accurate, consistent, and well-maintained."
